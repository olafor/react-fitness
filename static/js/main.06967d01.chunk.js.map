{"version":3,"sources":["Components/line-chart-one.js","Components/line-chart-two.js","Components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["LineChartOne","props","chartContainer","useRef","useState","setChartInstance","max","setMax","min","setMin","useEffect","data","length","weightProgression","map","value","Math","current","newChartInstance","Chartjs","type","options","scales","yAxes","ticks","scaleLabel","display","labelString","xAxes","labels","d","time","datasets","label","title","fill","backgroundColor","color","pointRadius","borderColor","borderWidth","lineTension","ref","LineChartTwo","data1","metrics","concat","data2","title1","color1","title2","color2","useStyles","makeStyles","theme","root","margin","spacing","width","Dashboard","weightData","setWeightData","waistData","setWaistData","chestData","setChestData","weightField","setWeightField","waistField","setWaistField","chestField","setChestField","date","toISOString","split","formatDate","Date","setDate","classes","align","Grid","container","justify","style","padding","item","md","className","paddingTop","TextField","marginTop","id","InputProps","inputProps","variant","size","onChange","event","target","defaultValue","InputLabelProps","shrink","Button","onClick","preventDefault","unchangedData","parseFloat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06967d01.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport Chartjs from 'chart.js';\n\nconst LineChartOne = (props) => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [max, setMax] = useState(100);\n  const [min, setMin] = useState(0);\n\n  useEffect(() => {\n    if (props.data.length > 0) {\n      const weightProgression = props.data.map((data) => data.value);\n      setMax(Math.max(...weightProgression) + 1);\n      setMin(Math.min(...weightProgression) - 1);\n    }\n  }, [props.data]);\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, {\n        type: 'line',\n        options: {\n          scales: {\n            yAxes: [\n              {\n                ticks: { max, min },\n                scaleLabel: {\n                  display: true,\n                  labelString: 'kg',\n                },\n              },\n            ],\n            xAxes: [\n              {\n                scaleLabel: {\n                  display: true,\n                  labelString: 'time',\n                },\n              },\n            ],\n          },\n        },\n        data: {\n          labels: props.data.map((d) => d.time),\n          datasets: [\n            {\n              label: props.title,\n              data: props.data.map((d) => d.value),\n              fill: 'none',\n              backgroundColor: props.color,\n              pointRadius: 2,\n              borderColor: props.color,\n              borderWidth: 1,\n              lineTension: 0,\n            },\n          ],\n        },\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [props.data, max, min]);\n\n  return (\n    <div>\n      <canvas ref={chartContainer} />\n    </div>\n  );\n};\n\nexport default LineChartOne;\n","import React, { useRef, useEffect, useState } from 'react';\nimport Chartjs from 'chart.js';\n\nconst LineChartTwo = (props) => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n\n  const [max, setMax] = useState(100);\n  const [min, setMin] = useState(0);\n\n  useEffect(() => {\n    if (props.data1.length > 0) {\n      const temp = props.data1.concat(props.data2);\n      const metrics = temp.map((data) => data.value);\n      setMax(Math.max(...metrics) + 1);\n      setMin(Math.min(...metrics) - 1);\n    }\n  }, [props.data1]);\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, {\n        type: 'line',\n        options: {\n          scales: {\n            yAxes: [\n              {\n                ticks: { max, min },\n                scaleLabel: {\n                  display: true,\n                  labelString: 'cm',\n                },\n              },\n            ],\n            xAxes: [\n              {\n                scaleLabel: {\n                  display: true,\n                  labelString: 'time',\n                },\n              },\n            ],\n          },\n        },\n        data: {\n          labels: props.data1.map((d) => d.time),\n          datasets: [\n            {\n              label: props.title1,\n              data: props.data1.map((d) => d.value),\n              fill: 'none',\n              backgroundColor: props.color1,\n              pointRadius: 2,\n              borderColor: props.color1,\n              borderWidth: 1,\n              lineTension: 0,\n            },\n            {\n              label: props.title2,\n              data: props.data2.map((d) => d.value),\n              fill: 'none',\n              backgroundColor: props.color2,\n              pointRadius: 2,\n              borderColor: props.color2,\n              borderWidth: 1,\n              lineTension: 0,\n            },\n          ],\n        },\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [props.data1, props.data2, max, min]);\n\n  return (\n    <div>\n      <canvas ref={chartContainer} />\n    </div>\n  );\n};\n\nexport default LineChartTwo;\n","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport LineChartOne from './line-chart-one';\nimport LineChartTwo from './line-chart-two';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst formatDate = (date) => date.toISOString().split('T')[0];\n\nconst Dashboard = () => {\n  const [weightData, setWeightData] = useState([]);\n  const [waistData, setWaistData] = useState([]);\n  const [chestData, setChestData] = useState([]);\n\n  const [weightField, setWeightField] = useState(97.0);\n  const [waistField, setWaistField] = useState(100);\n  const [chestField, setChestField] = useState(110);\n\n  const [date, setDate] = useState(formatDate(new Date()));\n\n  const handleWeightChange = (event) => {\n    setWeightField(event.target.value);\n  };\n\n  const handleWaistChange = (event) => {\n    setWaistField(event.target.value);\n  };\n\n  const handleChestChange = (event) => {\n    setChestField(event.target.value);\n  };\n\n  const handleDateChange = (event) => {\n    setDate(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setWeightData((unchangedData) => [...unchangedData, {\n      time: date, value: parseFloat(weightField),\n    }]);\n\n    setWaistData((unchangedData) => [...unchangedData, {\n      time: date, value: parseFloat(waistField),\n    }]);\n\n    setChestData((unchangedData) => [...unchangedData, {\n      time: date, value: parseFloat(chestField),\n    }]);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div align=\"center\">\n      <Grid\n        container\n        justify=\"center\"\n        spacing={4}\n        style={{\n          padding: '10px',\n        }}\n      >\n        <Grid item md={6}>\n          <LineChartOne\n            data={weightData}\n            title=\"weight\"\n            color=\"red\"\n          />\n        </Grid>\n        <Grid item md={6}>\n          <LineChartTwo\n            data1={waistData}\n            title1=\"Waist\"\n            color1=\"red\"\n            data2={chestData}\n            title2=\"Chest\"\n            color2=\"blue\"\n          />\n        </Grid>\n      </Grid>\n      <div>\n        <form className={classes.root}>\n          <div style={{ paddingTop: '20px' }}>\n            <TextField\n              style={{\n                marginTop: 0,\n                backgroundColor: 'white',\n              }}\n              id=\"weight\"\n              type=\"number\"\n              InputProps={{\n                inputProps: {\n                  max: 200, min: 40,\n                },\n              }}\n              variant=\"standard\"\n              size=\"small\"\n              color=\"primary\"\n              label=\"Enter Weight [kg]\"\n              value={weightField}\n              onChange={handleWeightChange}\n            />\n            <TextField\n              style={{\n                marginTop: 0,\n                backgroundColor: 'white',\n              }}\n              id=\"waist\"\n              InputProps={{\n                inputProps: {\n                  max: 200, min: 40,\n                },\n              }}\n              type=\"number\"\n              variant=\"standard\"\n              size=\"small\"\n              color=\"primary\"\n              label=\"Enter Waist [cm]\"\n              value={waistField}\n              onChange={handleWaistChange}\n            />\n            <TextField\n              style={{\n                marginTop: 0,\n                backgroundColor: 'white',\n              }}\n              id=\"chest\"\n              type=\"number\"\n              InputProps={{\n                inputProps: {\n                  max: 200, min: 40,\n                },\n              }}\n              variant=\"standard\"\n              size=\"small\"\n              color=\"primary\"\n              label=\"Enter Chest [cm]\"\n              value={chestField}\n              onChange={handleChestChange}\n            />\n          </div>\n          <TextField\n            id=\"date\"\n            label=\"Enter Date\"\n            type=\"date\"\n            defaultValue={date}\n            onChange={handleDateChange}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </form>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Update Metrics\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './Components/dashboard';\n\nconst App = () => (\n  <div align=\"center\">\n    <h1>A simple Fitness App</h1>\n    <Dashboard />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}